git init .......incializa git en la consola
git add ........añade un documento a git, independientemente de que silo hallas añadido antes y hayas llevado un
                seguimiento de este archivo en git antes, para guardar sunueva version tienes que volvar a añadirlo
                (ocupar este comando) y despues guardarlo conel comando commit, simepre hay que cumplir este ciclo.    
git commit......guarda los cambios hechos en el documento
git status -s...-este comando nos muestra estatus de los archivos que se encuentran en la carpeta
                -Si inicialisaste git y al añadir un archivo y al ver su status tiene signos de interrogación rojos
                quiere decir que git  aun no tiene un seguimiento de ese archivo                
                si aparece una A es que git ya esta llevando un seguimiento del archivo
                -cuando en el status de tu archivo en git aparece una M mayuscula en
                 rojo significa que guardaste el archivo en tu programa pero que aun no lo guardas en gito que ha 
                 tenido alguna modificacion y no lo has guardado aun   

git commit -m "comentario"....con esto guardamos la ultima version del documento y añadimos un comentario
                              esta es la forma en la que guardamos y actualizamos un archivo en git.
git log --oneline......Este comando nos sirve para ver todos los cambios que has hecho y los comentarios
                       de tu archivo 
git commit -am "comentario".....esto lo usamo principalmente para hacer el comando commit y el comando add al mismo tiempo 
                                en un solo comentario  
git add .  ...... Este comando nos agrega todos los archivos que acctualizaste de  una carpeta 
git show .......... nos muestra todos los cambios historicos de un repositorio y quien lo hizo
git push ...... nos permite enviar nuestro archivo a un repositorio remoto
git push ....... nos permite traerlos archivos de u repostorio lejado   
git commit -am “commit description”: añade al staging area y hace un commit mediante un solo comando. (No funciona con archivos nuevos)
git rm (. -r, filename) (–cached): remueve los archivos del index.
git config --global user.email tu@email.com: configura un email.
git config --global user.name <Nombre como se verá en los commits>: configura un nombre.
git config --list: lista las configuraciones.
git log: lista de manera descendente los commits realizados.
git log --stat: además de listar los commits, muestra la cantidad de bytes añadidos y eliminados en cada uno de los archivos modificados.
git log --all --graph --decorate --oneline: muestra de manera comprimida toda la historia del repositorio de manera gráfica y embellecida.
git show filename: permite ver la historia de los cambios en un archivo.
git diff <commit1> <commit2>: compara diferencias entre en cambios confirmados.
git reset <commit> --soft/hard: regresa al commit especificado, eliminando todos los cambios que se hicieron después de ese commit.
git checkout <commit/branch> <filename>: permite regresar al estado en el cual se realizó un commit o branch especificado, pero no elimina
                                          lo que está en el staging area.
git checkout – <filePath>: deshacer cambios en un archivo en estado modified (que ni fue agregado a staging)
git rm --cached <archivo/s>: elimina los archivos del área de Staging y del próximo commit, pero los mantiene en nuestro disco duro.
git rm --force <archivo/s>: elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro
                            de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos aplicar 
                            comandos más avanzados).
git reset --soft: Vuelve el branch al estado del commit especificado, manteniendo los archivos en el directorio de trabajo y lo que haya
                  en staging considerando todo como nuevos cambios. Así podemos aplicar las últimas actualizaciones a un nuevo commit.
git reset --hard: Borra absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.
git reset HEAD: No borra los archivos ni sus modificaciones, solo los saca del área de staging, de forma que los últimos cambios de estos
               archivos no se envíen al último commit. Si se cambia de opinión se los puede incluir nuevamente con git add.
git branch <new branch>: crea una nueva rama.
git checkout <branch name>: se mueve a la rama especificada.
git merge <branch name>: fusiona la rama actual con la rama especificada y produce un nuevo commit de esta fusión.
git branch: lista las ramas generadas.
parrafo agregado 
                                  
