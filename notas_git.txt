++++++++++++++++++++++++++Error de git 
al subir o actualizar un archivo en git 
1.- vemos que hayamos inicializado con: git init en el documento
2.- añadimos el arquivo que queremos a git : git add .
3.- cpturamos una copia como repositorio: git commit -m ""
4.-establecemos que estamos trabajando con la rama principal: git branch -M main
5.-establecemos el repositorio al que se mandara dentro de github:git remote add origin https://github.com/IvanHRz/ArrayDemoProyect-C-.git
6.-le decimos a git que suba el archivo desde la carpeta en la que estamos:git push -u origin main
cuando nos salga el error: fatal: remote origin already exists
podemos ver en dode esta asignado el origin de git en estra pc con: git remote --verbose
luego tenemos que reasignar el orgen al archivo que queremos subir, tenemos que poner lo siguiente:
git remote set-url url_de_github_al_que_queremos_mandar_el_archivo      
y despues subir el archivo con:
git push -u origin master

si nos aparece el error "fatal: remotoorigin ya existe" tendremos que establecer la rama principal en donde
estamos con: git branch -M main
y volver a poer ael comando: git push -u origin main  



ojo siempre poner atencion si estamos en maste o en main antes de usar el push  
+++++++++++++++++++++++++++++++++++extraccion de archivo desde git hub+++++++

+++++++++++++++
git pull direccion_del_archivo_a_llamar usamos este comando para mandar a 

llamar a un archivo desde github tenemos que asegurarnos que en la carpeta en 

donde lo mandemos a llamar tengamos inicializado git  


git pull ....... nos permite traerlos archivos de un repostorio lejado   
start nombre_del_archivo ..con este comando podemos iniciar un archivo no lleva la pabra git



++++++++++++++++++++++++++++++++++++++++++++++++tag en un programa++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
git tag titulo_del_tag -m "comentario"

para subir las etiquetas ponemos 

git push --tags
+++++++++++++++++++++++++++++++++++++++++++++++++clone+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
para clonar u reositorio de git e instalarloen uestra pcusamos el comando 

git clone _direccion_github_del_archivo

con esto desde la carpeta en donde queremos el archivo lo mandamos a llamar y se guarda
generalmente el pull lo usaremos para actualizar un archivo de github a nuestra pc pero si on tenemos el archivo es mas facil 
usar clone que pull y solo descargar el archivo, ya que tendiamos que hacer un git add y un git commit de nuestra carpeta vacia 
para usar el git pull y descargar un archivo  
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
git init .......incializa git en la consola
git add ........añade un documento a git, independientemente de que silo hallas añadido antes y hayas llevado un
                seguimiento de este archivo en git antes, para guardar sunueva version tienes que volvar a añadirlo
                (ocupar este comando) y despues guardarlo conel comando commit, simepre hay que cumplir este ciclo.    
git commit......guarda los cambios hechos en el documento
git status -s...-este comando nos muestra estatus de los archivos que se encuentran en la carpeta
                -Si inicialisaste git y al añadir un archivo y al ver su status tiene signos de interrogación rojos
                quiere decir que git  aun no tiene un seguimiento de ese archivo                
                si aparece una A es que git ya esta llevando un seguimiento del archivo
                -cuando en el status de tu archivo en git aparece una M mayuscula en
                 rojo significa que guardaste el archivo en tu programa pero que aun no lo guardas en git o que ha 
                 tenido alguna modificacion y no lo has guardado aun   

git commit -m "comentario"....con esto guardamos la ultima version del documento y añadimos un comentario
                              esta es la forma en la que guardamos y actualizamos un archivo en git.
git log --oneline......Este comando nos sirve para ver todos los cambios que has hecho y los comentarios
                       de tu archivo 
git commit -am "comentario".....esto lo usamo principalmente para hacer el comando commit y el comando add al mismo tiempo 
                                en un solo comentario  
git commit --amend......con este comando podemos modificar la descripcion de un commit, con esto entramos al editor VIN 
                        y hacemos los cambios para poder editar primero ponemos :i y eso nos habilitara la edidicion 
                        luego tenemos que borrar carcter por caracter con la tecla suprimir y al haber borrado el titulo 
                         anterior pulsamos la tecla scape la cual sera un comando de que terminamos la edicion que en este
                        primer caso seria el borrar el titulo y ahora volvemos a ingresar el comando :i para volver a habilitar
                       la edicion y ahora  escribimos el enuevo titulo, damos enter pulsamos scape y en ese momento se habra actualizado
                       el nuevo titulo y ahora para guardar y sali del editor escribimos el comando :wq y eso seria todo   
                        Otra forma de guardar y salir es con scape +z +z  
git add .  ...... Este comando nos agrega todos los archivos que acctualizaste de  una carpeta 
git show .......... nos muestra todos los cambios historicos de un repositorio y quien lo hizo
git push ...... nos permite enviar nuestro archivo a un repositorio remoto
git pull ....... nos permite traerlos archivos de un repostorio lejado   
git commit -am “commit description”: añade al staging area y hace un commit mediante un solo comando. (No funciona con archivos nuevos)
git tag fecha -m "comentario/etiqueta"....... con este comando podemos agregarle una etiqueta nuestro archivo 
git push --tags ..... con este comando podemos subir nuestra etiqueta a Github 
git clone direccion_de_github ........ con este comando podemos copiar un archivo desde nuestro repoitorio de github a una carpeta especifica
                                       1.-copiamos el url del archivo en github, en el boton verde "code" 
                                       2.-abrimos la consola en la carpeta que queremos colocar el archivo
                                       3.-ponemos el comando clone y despues de un espacio pegamos la url y listo    
git rm (. -r, filename) (–cached)... remueve los archivos del index.
git branch.... lista las ramas generadas.
git branch nombre_de_una_nueva_rama ........ creas una nueva rama de trabajo
git checkout nombre_de_la_rama ....... con esto puedes entrar a la rama en la que quieras trabajar 
git merge <branch name>: fusiona la rama actual con la rama especificada y produce un nuevo commit de esta fusión. nota
                         para acer lafusion debemos estar en a rama princial (master)
git checkout #commit archivo.txt: volvemos uestro archivo  a la version del commit indicada, sin cambiar nada en el staging 
git checkout master archivo.txt: volvemos nuestro archivo a la version que teniamos antes de hacer el primer checkout , sin cambiar nadaen el staging 
      
git config --global user.email tu@email.com: configura un email.
git config --global user.name <Nombre como se verá en los commits>: configura un nombre.
git config --list: lista las configuraciones.
git log: lista de manera descendente los commits realizados.
git log --stat: además de listar los commits, muestra la cantidad de bytes añadidos y eliminados en cada uno de los archivos modificados.
git log --all --graph --decorate --oneline: muestra de manera comprimida toda la historia del repositorio de manera gráfica y embellecida.
git show filename: permite ver la historia de los cambios en un archivo.
git diff <commit1> <commit2>: compara diferencias entre en cambios confirmados. este comando se usa luego de ver los commit que podemos
                              visualizar en git log nombre_del_archivo.txt    loscommit son los numeros raros amarillos
                              poner por lo regular la version mas actual primero y luego la antigua y lo color rojo es lo que
                              ha cambiado y lo verde es lo que sigue igual y lo gris es lo que nunca ha cambiado. 
git reset <commit> --soft/hard: regresa al commit especificado, eliminando todos los cambios que se hicieron después de ese commit.
git checkout <commit/branch> <filename>: permite regresar al estado en el cual se realizó un commit o branch especificado, pero no elimina
                                          lo que está en el staging area.
git checkout – <filePath>: deshacer cambios en un archivo en estado modified (que ni fue agregado a staging)
git rm --cached <archivo/s>: elimina los archivos del área de Staging y del próximo commit, pero los mantiene en nuestro disco duro.
git rm --force <archivo/s>: elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro
                            de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos aplicar 
                            comandos más avanzados).
git reset --soft: Vuelve el branch al estado del commit especificado, manteniendo los archivos en el directorio de trabajo y lo que haya
                  en staging considerando todo como nuevos cambios. Así podemos aplicar las últimas actualizaciones a un nuevo commit.
git reset --hard: Borra absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.
git reset HEAD: No borra los archivos ni sus modificaciones, solo los saca del área de staging, de forma que los últimos cambios de estos
               archivos no se envíen al último commit. Si se cambia de opinión se los puede incluir nuevamente con git add.
git branch <new branch>: crea una nueva rama.
git checkout <branch name>: se mueve a la rama especificada.
git merge <branch name>: fusiona la rama actual con la rama especificada y produce un nuevo commit de esta fusión.
git branch: lista las ramas generadas.
git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
poniendo code en la consola de git  podemos abrir visual studio 
git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el número de commits.
git log --after=“2018-1-2” ,
git log --after=“today” y
git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html- Busca los commits en un archivo en específico.
git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar los logs en un archivo txt
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++ linea de comandos fuera de git++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
ls........ te lista los archivos que hay en una carpeta
ls -al ... te lista los archivos de una carpeta incluyendo los archivos ocultos y más datos especificos   
ls -l..... te listalos archivos de lacarpeta y te muestra sus especificaciones pero no te muestra los archivos ocultos 
ls -a..... te mostraralos archivos de la carpeta pero no en ua lista 
clear .... limpio la pantalla de la consola 
control + l ...limpio la consola 
pwd ...... te muestra tu ubicacion dentro del disco c
cat ...... nos permite ver una vista previa de un archivo en la consola 
history... nos permite ver de forma enumerada todos los comando que hayamos escrito en la consola 
!no.comando.... este comando nos permite escribir un comando con el numero especificado en el historial
                ponemos un signo de exlamacion y el numero del comndo y se ejecutara 
rm archivo.txt ....... este comando borra un archivo seleccionado 
comando --help ....... este comando nos permite obtener informacion sobre cualquier comando  

++++++++++++++++++++++++++++++++++++++++++++++Ramas++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

siempre tener en cuenta que master y main es basicamete lo mismo pero que trabajan con direcciones 
diferentes.en realidad, hasta mediados del año 2020 esta rama se llamaba "master" y no "main". Pero
por aquel entonces, aunque existen diversas teorías sobre el origen de ese nombre, se decidió que era una
referencia al esclavismo ("master" de "amo", frente a "slave" de "esclavo. Otras teorías hablan, con más lógica
IMHO, de que viene de "master copy" o copia maestra o principal) y que había que renombrarla. Así que ahora es
"main" y no "master".  


para crear una rama usamos el comado: git branch nombre_de_la_rama 	
con el comando: git branch        sin ningun otro parametro te mostrara las ramas que hay en ese proyecto 	
con el comando: git chekout _nombre_de_la_rama_a_la_que_queremos_pasar con este comando podemos cambiar de rama	
al hacer algun cambio en alguna rama tenemos que añadir y hacer commit antes de cambiar de rama 
<<<<<<< HEAD

merge
1.-para hacer un merge (fusion de ramas) primero debemos estar en la rama master   
2.-usar el comando: git merge _rama_secuandaria_a_fusionar 
=======
>>>>>>> principal_gg
																					 